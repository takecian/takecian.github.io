<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>takecian</title>
    <link>https://takecian.github.io/</link>
    <description>Recent content on takecian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 29 Mar 2020 16:02:43 +0900</lastBuildDate>
    
	<atom:link href="https://takecian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>転職して(ほぼ)一ヶ月が経った</title>
      <link>https://takecian.github.io/posts/2020-03-29_diary/</link>
      <pubDate>Sun, 29 Mar 2020 16:02:43 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2020-03-29_diary/</guid>
      <description>コロナの影響もあって、この一ヶ月かなりバタバタしてたので忘れないうちに日記に残しておこうと思う。
先月末に３年半くらい働いた会社を辞めた。

（書類上の退職日は今月なんだけど最終出社したのが先月なので先月ということにする）
会社に「畜生、転職だ」ってなるほどの理由があって辞めたわけじゃなくて。
一緒に働いてた人たちはいい人だったし、マネージャーも話せる人だったし、チームの人も若くて優秀だったし、こっちが勉強させてもらうことが多かったように思う。
もちろん気になることはあったけど、どこの会社に行ってもあるよね、くらいのことでそれを理由に辞めようとは思ってなかった。
辞めた理由は(もし行けるなら)行ってみたい会社からオファーが出たから。
転職活動は過去のエントリの「Google の中途採用を受けてオファーをもらった話」にまとめてある。
というわけで今月から渋谷が職場になると思ってた。

渋谷が職場になると思ってたんだけど最近はほとんど自宅で仕事してる。
とりあえずWFH環境できたので仕事する pic.twitter.com/xLPStYb30V
&amp;mdash; takecian (@takecian) March 23, 2020  コロナの影響で予定してた出張がなくなったり、基本的にWFH(Work From Home)になったりで、普通に転職した時より何倍も精神的に負担がきてる感じがある。
こんな状況でもチームの人は暖かく迎え入れてくれて、 入社早々リモートで仕事しないといけなくなって大変なことをかなり気にかけてもらえててありがたいなと思ったり。
肝心の仕事についていうと詳しいことはもちろん書かないんだけど、他の会社と違うことだらけ、という印象。
公開されてる情報でいうとソースコード管理の話。
  まず git を使ってない。
全部のソースコードは一つのリポジトリに突っ込まれてる。 この動画(4年前)でそのリポジトリのサイズは86TBって言ってる。
もうなんか狂ってるよね。
他も全部社外の常識は通じないんでしょう。
入社して思ったのは「あ、これまでの知識ほぼ役に立たんな」ということ。
使いまわせる知識はコンピュータサイエンス的な基礎知識と、仕事で関わるプラットフォームの基礎知識くらい。
あとは全部入社してから勉強勉強。
それとオフィスの中で見かける文字はほぼ英語。 ミーティングももちろん全部英語。資料も全部英語。
英語できないとつらい、無理ってなる。
会話は1対1のコミュニケーションならなんとかなるけど、ミーティングで話される英語が全然分からない。
それがつらいからか、入社して2週間くらいは毎朝吐きそうになってた。 (土日は朝吐きそうにならなかった。人間の体すごい)
今は吐きそうにならなくなったけど、英語が分からないのは変わらない。
コード書くのはなんとか頑張るとして、まず英語力を改善しないと話にならないので Berlitzに通い始めた。だけどコロナのせいで対面方式の英会話やるのは・・ってなって自粛中。
何か他の方法で英語勉強しないと。というのが今の状況。
試用期間が3ヶ月あるので次更新するエントリが「クビになった」的なエントリにならないことを願う。</description>
    </item>
    
    <item>
      <title>Netlify CMS を導入した</title>
      <link>https://takecian.github.io/posts/2020-02-10-netlify-cms-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 10 Feb 2020 15:23:12 +0000</pubDate>
      
      <guid>https://takecian.github.io/posts/2020-02-10-netlify-cms-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F/</guid>
      <description>ブラウザ上でブログを書くために Netlify CMS を導入してみた。
やり方はこちら。
https://www.netlifycms.org/docs/add-to-your-site/#configuration
ブラウザ上でブログを書くと Netlify 側で git に commit/push してくれるらしい。
このブログは Hugo を使ってるんだけどレポジトリそのままではブログ用の html が作られていなくて（hugo コマンドで生成しないといけない）、 html の生成も Netlify がやってくれてホスト先に展開してくれるらしい。
https://sharp-turing-842fc1.netlify.com/
ただ github pages 側に反映させるにはまだ一手間必要で(生成した html をリポジトリに入れないといけない）
github pages と Netlify 上に同じブログができたというよく分からない状況になってる。
・・ブログ書くの楽になったのかなこれw</description>
    </item>
    
    <item>
      <title>2020年頑張ること</title>
      <link>https://takecian.github.io/posts/2020-01-15/</link>
      <pubDate>Wed, 15 Jan 2020 00:46:59 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2020-01-15/</guid>
      <description>エンディングノート 5年くらい前に買ってたエンディングノートの更新をした。
※エンディングノート：自分が病気をしたり死んだりした時に家族が困りそうな情報をまとめておくノート。
別に遺言を残してるわけじゃなくて「使ってる証券会社、銀行はここ」とか普段奥さんに言ってないことをメモして残してる。 もう売ってしまったので消したけど他にも暗号通貨とか持ってたらどこの取引所とかウォレットに入れてあるか、の情報を書いてたり。
こういう自分の死が関係しそうなものは敬遠しがちだけど元気なうちから手に付けておくといざという時困らなくていいなと思う。
2020年頑張ることリスト これまで作ってなかったけどせっかくなので作ってみる。基本的には trello で管理してるけど、今年主に頑張るのはこの辺り。
1. 英語 仕事で使うことになるのでこれは頑張らないといけない。死活問題。 少なくとも今月来月は平日は毎日レアジョブをやる。
2. iOS 開発(SwiftUI, Swift, Objective-C) SwiftUI の勉強はもちろん Objective-C あたりの勉強もちゃんとやる。 この辺りはノートとボールペン使って手を動かしながら勉強しようと思う。
手を動かすと五感への刺激？が違うらしく記憶の定着がいい説があるとかないとか。
3. 統計学の勉強 ここは趣味の範囲になるけど統計よくわかってないコンプレックスがあるのでそろそろ払拭したい。
まずはここを頑張る＝他のことはやらない、で一年過ごしたいと思う。
もし仕事が順調で余裕ができれば 機械学習の勉強＆kaggle を頑張れたらいいな、くらい。
まずは３月からの仕事で結果出さないと。</description>
    </item>
    
    <item>
      <title>2019年振り返り</title>
      <link>https://takecian.github.io/posts/2019-12-31_diary/</link>
      <pubDate>Tue, 31 Dec 2019 23:53:28 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-12-31_diary/</guid>
      <description>今年もあと10分を切った(と言いつつ書き上がった時には年は明けてた)ので振り返ってみる。
年始のエントリで、
 少し広範囲を見るポジションをやりたい
 みたいなことを言ってたけど結局ポジションは年始と変わらないまま１年が過ぎた。
 3月にLeSS取って、 知人のスタートアップ少し手伝ったりして、 8月に仕事のアプリが無事リリースされて、 Google 受けて、  という感じだったけど Google を受けるための活動が仕事外で大半の時間を占めた一年だった。
仕事外だと、
 ウェルスナビ をやめて投資信託を始めた  ロボアドバイザーは手数料が高いのが多い(だいたい1%)、eMAXIS Slim(0.1%くらい)にした方がよさそう   子どもの証券口座を作ってそっちでも投資信託を始めた ソーシャルレンディングもやめた(クラウドバンクとかクラウドクレジット)  自分でよく分かってないものにお金突っ込んでたから    くらい。投資信託を長期投資でやっていくのがいいのかなと思ってるところ。</description>
    </item>
    
    <item>
      <title>Google の中途採用を受けてオファーをもらった話</title>
      <link>https://takecian.github.io/posts/2019-12-17_diary/</link>
      <pubDate>Sun, 29 Dec 2019 00:31:23 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-12-17_diary/</guid>
      <description>Google の SWE(iOS エンジニア)のポジションに応募してオファーをもらった。 こんなにストレスのかかる日々は久しぶりだった（転職活動ってこんな大変だっけ、と思った）のであとで振り返るためにも文章に残しておくことにした。
これから受ける人の参考になればいいなと思う。 もちろん面接で出た問題の話とかどんなこと聞かれたかとかは書いてない。
TL; DR  Google の中途採用を受けてオファーをもらった 受けるまでに5ヶ月準備したことをまとめた 面接を受けてからオファーまで３ヶ月ちょっとかかった  誰？ こんなスペックのエンジニア(@takecian)。
 阪大 修士(情報科学) → Sony → LINE 言語  仕事  Windows(C++, C#) 5年 Server(Java, Ruby) 2年 iOS(Swift) 5年   競プロ  Python(AtCoder 水色)     英語話者との仕事経験あり  TOEIC は6年くらい前に受けたのが確か800くらい    採用プロセスに進むまで 2019年の４月にリクルーターから Linkedin でメッセージがきた。 ちょうど「こうしてGoogleに入社した」系のブログが Twitter 界隈を賑わしていた時期。
「でも入れないし…」というコメントが多いので、次は誰かに「私はこうやってGoogleに入った」というエントリーを書いて1000ブクマ目指してほしい。 https://t.co/vnULx3ZqZV
&amp;mdash; Ryoichi Imaizumi | 今泉竜一 (@r_ima) March 24, 2019  はてなブログに投稿しました #はてなブログ @chokudai 氏のツイートを2つも貼った</description>
    </item>
    
    <item>
      <title>人間は歯が命</title>
      <link>https://takecian.github.io/posts/2019-12-13_diary/</link>
      <pubDate>Sat, 14 Dec 2019 00:21:38 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-12-13_diary/</guid>
      <description>芸能人に限らず、という話。
余ってたポイント使わないとと思ってジェットウォッシャー買った。
「口からザリガニの臭いした」とかいうマーケティングされてるけど自分の口にはザリガニ住んでなかったよかった。https://t.co/xK6Q0Fhq8b pic.twitter.com/pOR63cu9tV
&amp;mdash; takecian (@takecian) December 13, 2019  ジェットウォッシャーを買った。効果があるかは分からないけど効いてる気はする。
他にも Philips の電動歯ブラシとフロスを使って歯のケアをやってるけどもっと小さい時からやっとけばよかったと思う。
歯の矯正とかも今になってやっとけばよかったなとか思ったり。
調べたら大人になってからも矯正はできるらしいのでもしかしたらやるかもしれない。
子どもには小さい頃からフロスとか定期健診とか受けさせよう。</description>
    </item>
    
    <item>
      <title>kaggle を始めた</title>
      <link>https://takecian.github.io/posts/2019-12-11_diary/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-12-11_diary/</guid>
      <description>AtCoderをやってたんだけど子どもの寝る時間が20時過ぎることがあったり（それまで晩ご飯食べられない）でコンテストに出るのが大変な時期になってる。
そこでリアルタイムにコンテストに出るのは当分諦めて後から問題だけやってみることにした。
他に時間の縛りが緩くてできるものないかなということで kaggle をやってみることにした。
Kaggleで勝つデータ分析の技術っていう本を買って読み進めてるところ。
kaggle はデータ分析のテクニックとそれを使って学習したモデルを使って、未知のデータの予想精度を競うものらしい。
チュートリアル問題として「タイタニックの生存者予測っていうお題がある。
データとして名前、性別、年齢、どこから乗ったか、何人で乗ったか、などの属性と「その人が生存したかどうか」が与えられる。 与えられたデータを使って学習した後に、別のデータを与えられて、「そのデータの人が生存したかどうか」を予想する。
昔やった「Chainer で競馬予想をしてみる」と同じようなこと（もっと高度だけど）をやるっぽい。
結構面白そう、と思って本を読みながら勉強してるんだけど、
 データ解析のための知識(カテゴリ変数をどう扱うか、とか) データ解析のための技術(pandas とかグラフにする方法とか) 機械学習ライブラリの使い方（deep learning に限らず）  そもそも機械学習ライブラリのアルゴリズムの理解も    とか分からないことが大量に出てきた（競プロだと pandas とか使わないし仕事だとちょっとしたスクリプトくらいしか Python で書かない）
というわけで追加で前処理大全 も買ってみた。
ちなみに kaggle も AtCoder みたいにランクがある。 https://www.kaggle.com/progression Novice -&amp;gt; Contributer -&amp;gt; Expert -&amp;gt; Master -&amp;gt; GrandMaster の順。
初期設定とか一通りやると Contributer になれて、今ここ。
まず Expert を目指してみようと思う。</description>
    </item>
    
    <item>
      <title>年内に読みたい</title>
      <link>https://takecian.github.io/posts/2019-11-25_diary/</link>
      <pubDate>Mon, 25 Nov 2019 18:04:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-11-25_diary/</guid>
      <description>買ったけど読んでない本がけっこう溜まってる。
電子本だと視界に入ることがまずないので一度記憶から消えると読むことなく時間が過ぎていく。
ちょっと空き時間があってもスマホでネット見たりマンガ読んだりして時間が過ぎていく。
 ハーバード流マネジメント講座 ピクサー流想像する力 WORK RULES!(一度読んだけど忘れた) How Google works(一度読んだけど忘れた) THE MODEL 統計学が最強の学問である 人生がときめく片付けの魔法(一度読んだけど忘れた)  買って読んだけど忘れてる本とかもある。
電車の中でゲームやるのやめるところから始めてみよう。</description>
    </item>
    
    <item>
      <title>AtCoder を始めた</title>
      <link>https://takecian.github.io/posts/2019-07-08_diary/</link>
      <pubDate>Mon, 08 Jul 2019 13:16:07 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-07-08_diary/</guid>
      <description>去年 AtCoder を始めたんだけど子どもの誕生やら育休やらで止まっていたのを年明けから再開した。
先月に水色になったと思ったら緑に落ちたり、を２回くらい繰り返したけど最近落ち着いてきた。

AtCoder社長のブログ に
水色 (Bランク R1200~1599　上位15%) 水色はかなり優秀です。普通に企業とかで超優秀って言ってるプログラマが居た時に、半分くらいはこのランクになると思います。数学が得意なタイプだと、この一つの上の青色に行きますが。 半数以上のIT企業において、アルゴリズム能力についてはカンストと言えるでしょう。特にアルゴリズム的な能力を必要としない会社であれば、ここから上はレートを上げても実務に役立つ部分はほとんどありません。 と、書いてあったので水色にはなりたいなと思ってたので嬉しい。思ったより時間がかかった（5月くらいにはなれるだろうと勝手に思ってた）
コーディング面接の対策のために始めたんだけど年内に青色くらいまでは行きたいなーと思ってるあたり沼にハマりつつある。</description>
    </item>
    
    <item>
      <title>Baseball news Privacy policy</title>
      <link>https://takecian.github.io/work/npbsns_privacypolicy/</link>
      <pubDate>Fri, 29 Mar 2019 12:14:11 +0900</pubDate>
      
      <guid>https://takecian.github.io/work/npbsns_privacypolicy/</guid>
      <description>Privacy Policy Takeshi Fujiki built the Baseball news app as a Free app. This SERVICE is provided by Takeshi Fujiki at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.
If you choose to use my Service, then you agree to the collection and use of information in relation to this policy.</description>
    </item>
    
    <item>
      <title>Checklista Privacy policy</title>
      <link>https://takecian.github.io/work/checklista_privacypolicy/</link>
      <pubDate>Fri, 29 Mar 2019 12:14:11 +0900</pubDate>
      
      <guid>https://takecian.github.io/work/checklista_privacypolicy/</guid>
      <description>Privacy Policy Takeshi Fujiki built the Checklista app as a Free app. This SERVICE is provided by Takeshi Fujiki at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.
If you choose to use my Service, then you agree to the collection and use of information in relation to this policy.</description>
    </item>
    
    <item>
      <title>Cospa Privacy policy</title>
      <link>https://takecian.github.io/work/cospa_privacypolicy/</link>
      <pubDate>Fri, 29 Mar 2019 12:14:11 +0900</pubDate>
      
      <guid>https://takecian.github.io/work/cospa_privacypolicy/</guid>
      <description>Privacy Policy Takeshi Fujiki built the Cospa app as a Free app. This SERVICE is provided by Takeshi Fujiki at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.
If you choose to use my Service, then you agree to the collection and use of information in relation to this policy.</description>
    </item>
    
    <item>
      <title>Docker を使って qmk_firmware を焼く</title>
      <link>https://takecian.github.io/posts/2019-01-17_diary/</link>
      <pubDate>Thu, 17 Jan 2019 14:22:31 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-01-17_diary/</guid>
      <description>ergodox ez を使ってるんだけどなんかチャタリングが気になったので firmware を更新した時の備忘録。
firmware のビルドに docker が使えることに気づいたので下記コマンドを実行して自分のキーマップの firmware をビルドする。
util/docker_build.sh ergodox_ez:takecian そうするとバイナリができるので（ergodox_ez_takecian.hex）、teensy アプリをダウンロードしてくる。
https://www.pjrc.com/teensy/loader_mac.html
バイナリを指定した後に ergodox ez のリセットボタンを押す。
これで更新完了。チャタリングがなくなった気がする。
家にある ergodox ez も更新しよう。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://takecian.github.io/about/about/</link>
      <pubDate>Tue, 01 Jan 2019 01:12:56 +0900</pubDate>
      
      <guid>https://takecian.github.io/about/about/</guid>
      <description>takecian Software engineer, Tokyo
  Link  Facebook Twitter Linkedin Github AtCoder LeetCode kaggle  </description>
    </item>
    
    <item>
      <title>2019年</title>
      <link>https://takecian.github.io/posts/2019-01-01_diary/</link>
      <pubDate>Tue, 01 Jan 2019 00:54:48 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2019-01-01_diary/</guid>
      <description>2019年が始まりました。
部署移動して1年が経って、子どもが産まれて３ヶ月が経って、少し落ち着いてきた感じがある年越し。いや３ヶ月ってまだまだ大変なんだけど。
2019年は35歳になる歳で、30代の折り返し地点。
今の会社に転職したのが32歳、新卒で入った会社と比べるとキャリアに対するサポートが薄い感じがある。
新卒で入った会社ではよく上長(上司)から、
「５年後どうなっていたいですか？誰みたいになりたいですか？」
ということをよく聞かれた。
将来どうなりたいかを常に考えなさいって意味なんだと思うけど、これを聞かれることが今思うとすごくよかった。
今の会社に入って2年半くらい経つけど、キャリアについての話をされた記憶がない。
自分の事は自分で考えるというスタンスと言えばそれまでだけど、意識しないと目の前の仕事を片付けるだけで日々が過ぎていってしまう。もちろん目の前の仕事をすることは大事なんだけど、長い目で見て自分のためになることかどうかも考えないといけないなとふと思った。
特に「将来この人のようになりたい」といったロールモデルが見つからない職場であれば環境を変えることを考えてもいいかもしれない。
最近ふと思うのは職場のエンジニアは優秀だと思うけど、その能力がプロダクト開発に十分活きているかというと判断が難しいと思うことがある。いいエンジンを積んでいても進行方向が違っていたら目的地にたどり着けないのと同じ感じ。
やはりもう少し広範囲を見るポジションをやりたいと感じることも多くなってきた。</description>
    </item>
    
    <item>
      <title>気になっていること</title>
      <link>https://takecian.github.io/posts/2018-12-30_diary/</link>
      <pubDate>Sun, 30 Dec 2018 00:22:17 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-12-30_diary/</guid>
      <description>今気になっている技術 技術的なところでいうと先月書いた Playground driven development いいなという気持ちは変わっておらず、追加で英語のべんきょうもかねて Functional Swift Conferenceの動画を見てた。
まだ全部見てないけど特にいいなと思ったのが Compositional UI Styling というトーク。デザインの設定を細切れにした関数を結合することで行うようにしようという試み。
結構簡潔にできそうで少し試してみた。
1つ2つのUIに適応するだけだとあまりメリットなさそうだけど、例えば色の設定とか複数のUIに適応したいものを関するとして作っておいて、その関数を使って求める適応するとメンテナンスがしやすくているさそう例えばこんな感じ。
let style = styleViewBackgroundColor(.red) &amp;lt;&amp;gt; styleViewBorder(color: .blue, width: 10) このコードは背景を赤色にしてボーダーを青色、太さ10に設定する関数を作っています。この style は (UIView) -&amp;gt; Void型で、つまり関数なので、UIに適応することができる。
let button = UIButton() let label = UILabel() style(button) style(label) コードはボタンとラベルに背景色とボーダーの設定をしています。コードでデザインの定義ができるとメンテナンスがしやすい気がします。それに関数型プログラミングって感じある。状態を持たずにシンプルな関数を合成してやりたいことをやっていくってパズル要素もあって楽しい。
このような関数をたくさん作ったものをライブラリとしてまとめてみた。(ComposableStyling)[https://github.com/takecian/ComposableStyling]。 スターはまだない（誰かつけて欲しい）
後は Flutter も 1.0 になったし年に一つの言語に触れなさいという話もあるので Dart を触ってみようか。
＃去年は Python を勉強してた。
 https://atcoder.jp/users/takecian https://projecteuler.net/progress=takecian  競プロも最近止まってるからまた少しずつ再開しよう。育児が始まると AtCoder みたいな固定時間でやるのは難しそうだけど問題解くくらいはできるかな。</description>
    </item>
    
    <item>
      <title>新しいことを試す</title>
      <link>https://takecian.github.io/posts/2018-12-11_qiita/</link>
      <pubDate>Tue, 11 Dec 2018 00:09:31 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-12-11_qiita/</guid>
      <description>Xcode playground に恋した。
Playground driven development という記事を読んだ。
React や Flutter なんかだとできる live reload(hot reload) のようなことは native の iOS アプリ開発ではできてなかったんだけど、Playground を使って似たようなことができるようになってきています。それで実際試してみてかなり使い勝手が良いなと思ってきたり記事を書いてみたんだけど全然いいねがつかない。
記事はこれ。
あまり使っている人を聞かないから新しい発見だと思ったんだけど。
iOSアプリ開発を初めてだいたい４年ぐらい。なんとなく分かってきた感じではあるけど、でもどんどん新しいことが出てきているので立ち止まらずに色んなことを試して行かないと。
新しいことでいうと音声入力も試してみてる。
ちなみにこの記事の1部は音声入力で書いています。アルファベットをきれいに変換できないけど手が空いた状態で文章を書けるというのはすごい便利。
音声入力は mac だとファンクションキーを２回押下で起動できます、精度はイマイチな気もするけどもうちょっと試してみようと思う。</description>
    </item>
    
    <item>
      <title>MindMap を作るのに MindNode を使ってみる</title>
      <link>https://takecian.github.io/posts/2018-11-11_mindnode/</link>
      <pubDate>Sun, 11 Nov 2018 23:00:54 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-11-11_mindnode/</guid>
      <description>メモを作るときに Markdown で書いたりしてたんだけど マインドマップ の方が整理に向いてるケースがある気がしたので MindNode というアプリを使ってみることにした。
Mac版、iOS版があって AppleWatch でも見れたりする（見る機会はほぼないけど）。
Dropbox にファイルを入れて Mac で編集、 iPhone で見る、とかできて便利。
作ったマインドマップは png や Markdown に出力できる。
読んだ本の分類をやって見るとこんな感じ。

整理をしてみたけど本の中身をほとんど忘れてる事が多い・・。新しい本買う前に手元の本を読み直すこともやらないといけなさそう。
Scrum 関連の情報も整理してる。 ８月に認定スクラムマスター研修受けてきてある程度知識はついた気はするけど、もっと実践していかないと本当の意味での理解はできないっぽい。

今の職場で Scrum やってるけど、複数拠点とか多数ステークホルダーとか、 実際にプロジェクトをやっていくと難しいことに直面するよね。
実践して学んだことも追記しつつ勉強していかないと。</description>
    </item>
    
    <item>
      <title>Hugo from Jekyll</title>
      <link>https://takecian.github.io/posts/2018-11-11_hugo/</link>
      <pubDate>Sun, 11 Nov 2018 10:48:32 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-11-11_hugo/</guid>
      <description>ここのページを作るのに Jekyll を使ってたんだけどなんとなく他のものを使ってみたくて Hugo に替えてみた。
他にも静的サイトジェネレータ？はたくさんあるみたい。
StaticGen というところにまとめてあった。
どっちも Markdown で書くので移行はファイルをコピーするだけ。
Hugo はテーマを簡単に変えることができるみたいで楽しそう。
テーマはここ にたくさんある。
導入手順のコマンドがだいたい git clone ~ /themes/XXX になってるけど submodule で入れないと管理する時に困る。
hyde-hyde っていうテーマを使ってみた。変えるかもしれない。
git submodule add https://github.com/htr3n/hyde-hyde.git themes/hyde-hyde </description>
    </item>
    
    <item>
      <title>Work</title>
      <link>https://takecian.github.io/work/work/</link>
      <pubDate>Sun, 11 Nov 2018 01:05:35 +0900</pubDate>
      
      <guid>https://takecian.github.io/work/work/</guid>
      <description>作ったものを公開中。
  Android アプリ
 Google play    iOSアプリ
 App Store    </description>
    </item>
    
    <item>
      <title>Iris keyboard build-log</title>
      <link>https://takecian.github.io/posts/2018-05-30-build-log/</link>
      <pubDate>Wed, 30 May 2018 23:49:30 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-05-30-build-log/</guid>
      <description>Irisを作ったんだけど firmware を焼くのに手順を忘れるのでここのメモしておく。
takecian-MacBook-Pro:~/Development/Tools/qmk_firmware t-fujiki $ make iris/rev2:default:avrdude [master] QMK Firmware 0.6.41 WARNING: Some git sub-modules are out of date or modified, please consider runnning: make git-submodule You can ignore this warning if you are not compiling any ChibiOS keyboards, or if you have modified the ChibiOS libraries yourself. Making iris/rev2 with keymap default and target avrdude avr-gcc (GCC) 7.3.0 Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions.</description>
    </item>
    
    <item>
      <title>自作キーボード準備</title>
      <link>https://takecian.github.io/posts/2018-05-27-own-keyboard/</link>
      <pubDate>Sun, 27 May 2018 23:49:30 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-05-27-own-keyboard/</guid>
      <description>少し前までレザークラフトにはまってたんだけど次は電子工作に興味がうつってきた。
今やりたいのは自作キーボード。
２年くらい前に Ergodox EZ を買ったんだけど、最近は他にもいろんな分割キーボードがあるらしい。
調べた範囲でまとめてみた。
   名前 購入先     Let&#39;s split switchtop, MEHKEE   Iris keebio   Nyquist keebio   Helix 遊舎工房   Levinson keebio    けっこうあるっぽい。
Iris は Ergodox に似てて親指用のキーが独立してあるので作ってみることにする。
↑のサイトで購入できるのはPCB(基板)とプレート・ケースだけなので作る場合はキースイッチやキーキャップも別途購入する必要がある。
キースイッチは Cherry MX 互換のスイッチならよくて、AliExpress とかで買うのがよさそう。
キーキャップは pimpmykeboard とかあるけど送料がけっこうかかるので Cherry MX 互換ということで Majestouch の交換用キーキャップを流用するのも選択肢な気がする。
とはいえ部品の大部分は海外から購入なので注文から数週間かかるのでのんびり揃えるのがよさそう。</description>
    </item>
    
    <item>
      <title>レジュメとかいうやつ</title>
      <link>https://takecian.github.io/posts/2018-03-24-jobhunt/</link>
      <pubDate>Sat, 24 Mar 2018 23:49:30 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2018-03-24-jobhunt/</guid>
      <description>今の会社に入ったのは１年半前くらい。
そういえば年に一度は転職を視野に入れて活動した方がいいというのをその前の会社の人が言ってた。
 自分の市場価値をある程度知っておくべき 活動して他の会社に入れなさそうだと感じたら今やっていることを変えたほうがいい  みたいな意味らしい。
それでレジュメ(経歴とかかいたやつ)を更新でもしてみようかと思ったんだけど
どうせなら英語版も作ってみるかと調べてみた。
↓のリンクは世界で闘うプログラミング力を鍛える本の著者のサイトで、 「レジュメはこうしろや」みたいなアドバイスが書いてある。
https://www.careercup.com/resume
 面接官はどうせちゃんと読まない(読む時間ない)からA4一枚くらいの内容に絞れ 自分が達成したことを書け 短く書け(1-2行くらい)  とか。
内容を考えるのもそうだけどそもそも英語で書くのむずい。</description>
    </item>
    
    <item>
      <title>Android application privacy policy</title>
      <link>https://takecian.github.io/dev/android-privacy-policy/</link>
      <pubDate>Wed, 01 Feb 2017 20:40:59 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/android-privacy-policy/</guid>
      <description>Android application サービス利用規約＆プライバシーポリシー 本規約は、Takeshi, Fujiki（以下「開発者」とします）とお客様との間でのアプリケーション（コンピューターソフトウェア、マニュアルなどの関連書類及び電子文書並びにそれらのアップデート・アップグレード版を含み、以下「許諾ソフトウェア」とします）およびそれに付帯するオンラインサービス（許諾ソフトウェアと併せて以下「本サービス」とします）の使用に関する条件を定めるものです。許諾ソフトウェアを利用開始される前に、本規約をお読み下さい。お客様による許諾ソフトウェアのダウンロードをもって、本規約にご同意いただいたものとします。
許諾ソフトウェアの中には、開発者以外のソフトウェアの権利者が定める使用許諾条件（GNU General Public license (GPL)、Lesser/Library General Public License (LGPL)を含みますが、これらに限られるものではありません）を伴うソフトウェア（以下「対象外ソフトウェア」とします）が含まれている場合があります。 対象外ソフトウェアのご使用は、各権利者の定める使用許諾条件に従っていただくものとします。
第１条（許諾ソフトウェア） 許諾ソフトウェアは、日本国内外の著作権法並びに著作者の権利及びこれに隣接する権利に関する諸条約その他知的財産権に関する法令によって保護されています。許諾ソフトウェアは、本規約の条件に従い開発者からお客様に対して使用許諾されるもので、許諾ソフトウェアの著作権等の知的財産権はお客様に移転いたしません。開発者は、許諾ソフトウェアを、お客様がお持ちの本サービスに対応したデバイス（以下「指定デバイス」とします）上で、私的利用の目的で使用する、非独占的な権利をお客様に許諾します。
第２条（権利の制限）
 お客様は、許諾ソフトウェアの全部又は一部の複製、複写、譲渡、販売、これに対する修正、追加等の改変をすることはできないものとします。また、本サービスに含まれるトレードマークやその他の権利標記等の表示の削除および外観の変更をしてはならないものとします。 お客様は、別途明示的に承諾されている場合を除き、許諾ソフトウェアを再使用許諾、貸与又はリースその他の方法で第三者に使用させてはならないものとします。 3.お客様は、別途明示的に承諾されている場合を除き、許諾ソフトウェアの一部又はその構成部分を許諾ソフトウェアから分離して使用しないものとします。 お客様は、本サービスを用いて、開発者又は第三者の著作権等の権利を侵害する行為を行ってはならないものとします。 お客様は、本サービスに関しリバースエンジニアリング、逆アセンブル、逆コンパイル等のソースコード解析作業を行ってはならないものとします。 本サービスの利用に伴い、自動的に本サービスで用いるためのデータファイルを作成する場合があります。この場合、当該データファイルは許諾ソフトウェアと看做されるものとします。  第３条（本サービスの権利） 本サービスに関する著作権等一切の権利は、開発者が本規約に基づきお客様に対して使用許諾を行うための権利を開発者に許諾した原権利者（以下「原権利者」とします）に帰属するものとし、お客様は本サービスに関して本規約に基づき許諾された使用権以外の権利を有しないものとします。
第４条（投稿内容）
 お客様が本サービスを利用して投稿その他送信するコンテンツ（動画、自己紹介、サムネイル画像、コメント等本サービスを利用して送信できる一切の情報を含みます。以下併せて「投稿内容」とします）は、それが自己によるものと第三者によるものとを問わず、一部のものを除きお客様自身で削除することはできません。本サービスの一部の機能で投稿内容の一部を保存する場合がありますが、開発者は、投稿内容を保存する義務はなく、また、お客様からの削除要請に応じる義務はありません。 投稿内容に関する権利は、開発者または本サービスから提供された情報を除き、お客様に帰属しますが、投稿した時点でお客様は開発者に対して、投稿内容の一部または全部を、全世界において媒体に関わらず、使用、複製、配布、配信、改変、プロモーション目的で利用、その他本サービスおよび本サービスに関連して開発者が必要と判断する行為を行うことにつき、第三者に対する再実施許諾権つきの永続的な権利を無償で許諾すること、及び著作者人格権を行使しないこと、に合意するものとします。 開発者は、本サービスの提供および本サービスにおけるユーザー体験を向上させる等の目的のために、ユーザーネームおよび自己紹介を含む投稿内容、 ユーザーネーム、等のアカウントに関連する情報を含む一定の情報を公開することがあります。お客様は、開発者がかかる情報を当該目的のために、使用、配信、複製、表示等利用することにあらかじめ同意するものとします。 開発者は、自らまたは第三者を通じて、本サービスにおける投稿内容を含むあらゆるオンライン行動を監視、記録する権利、および開発者の裁量により投稿内容を削除したり、本サービスの利用を制限したりする権利を有するものとします。しかし、開発者は本サイトにおける投稿内容を含むあらゆるオンライン行動のすべてを監視する義務を負うものではありません。 お客様は、投稿内容について、投稿、送信その他の利用についての適法な権利を有していること、および投稿内容が第三者の権利を侵害していないことを表明および保証するものとします。投稿内容に関連してお客様と第三者との間に紛争が生じた場合、お客様は自己の責任と費用において解決するものとし、開発者は一切の責任を負わないものとします。  第５条（個人情報及び許諾ソフトウェアによる指定デバイス等に関する情報）
 本規約又は本サービスの使用に関し、開発者はお客様のSNSアカウント、カメラ、マイク、アカウント、連絡先など、特定の個人を識別できる情報（以下「個人情報」とします）を収集します。なお、お客様が第三者のソフトウェア又はサービスを使用し当該第三者に何らかの情報を提供する場合には、当該第三者が提示するプライバシーポリシーをご確認下さい。 開発者は、お客様の個人情報を下記の目的のために使用できるものとします。 (1)	本サービスを提供・運営するため (2)	お客様のお問い合わせや本サービスの利用にあたり必要な連絡をするため (3)	本サービスに関する規約等の義務履行を強制するため (4)	開発者の各種サービスや製品の機能をより良くするため、または開発者の新サービスや新製品を開発するため (5)	潜在的なセキュリティ上の脅威を特定し、かかる脅威からお客様および開発者を保護するため (6)	本サービスに関する宣伝活動を実施するため 開発者は、前項に定める目的の達成に必要な範囲内において、個人情報の取り扱いを第三者に委託する場合があります。これらの第三者は、個人情報の取り扱いにつき、十分なセキュリティ水準にあることを確認のうえ選定し、契約等を通じて、必要かつ適切な監督を行います。 本サービスの利用に伴い、許諾ソフトウェアが、指定デバイス、許諾ソフトウェア、本サービスに関連するコンテンツ、対象外ソフトウェア、及びお客様によるそれらの使用に関する次の各号に揚げる情報（以下「本情報」とします）を、収集し、開発者に送信することがあります。開発者は本情報を本条の規定に従い使用又は保管するものとし、お客様個人を特定する目的では使用しません。但し、特定の本サービス使用時に別途条件が提示され、お客様に同意を頂いた場合には、本情報の使用又は保管はかかる別途の条件に従います。 (1) 自動的に生成される指定デバイスの ID番号 (2) 指定デバイス及びその構成部分の稼働状況 (3) 指定デバイス、本サービス、本サービスに関連するコンテンツ又は対象外ソフトウェアの構成情報 (4) 指定デバイス、本サービス、本サービスに関連するコンテンツ又は対象外ソフトウェア、若しくはそれらの使用状況、使用頻度情報（お客様がどの機能を稼働状態にしたか及び関連する統計データを含みます） 開発者は、本情報を下記の目的（以下「本目的」とします）のために、法律の定めに従い、保管、使用又は開示できるものとします。 (1) 指定デバイスの機能及び指定デバイス使用時に発生するエラー又はバグの管理 (2) 許諾ソフトウェアのアップデート版 /アップグレード版を提供するための本サービスの機能の管理 (3)適用法令等の遵守 開発者は、本情報を次に定める条件に従い第三者に開示できるものとします。 (1) 開発者は、本目的の遂行のために、開発者が、指定デバイス、許諾ソフトウェア、本サービスに関連するコンテンツ又は対象外ソフトウェアに関して取引を行っている又は将来行う第三者に本情報を開示し、共有できるものとします。 (2) 開発者は、政府機関から又は法令に基づいて開示の要求がなされた場合、又は許容される範囲において、違法行為、犯罪行為その他の問題行為から、苦情、クレーム、申立を調査し、開発者又は第三者の権利を守るために、本情報を保有し、利用し、警察・政府機関を含む第三者に開示することができるものとします。 本情報は、お客様の居住国外に送信され、処理、保管されることがあります。本情報はお客様の居住国外で開発者又は開発者が当該業務を委託する第三者によって処理されます。それらの国においては、データ保護及びプライバシーに関する法律の保護がお客様の居住国の法律と同等でない場合、本情報に関するお客様の権利が制限されることがあります。開発者は、本情報に対する不正なアクセスや漏洩を防ぐための適切な技術的措置を講じ、体制を維持すべく合理的な努力を致します。但し、開発者は、かかる措置や体制により、不正アクセスや情報漏洩が生じないことを保証するものではありません。  第６条（オープンソースソフトウェア）</description>
    </item>
    
    <item>
      <title>Ergodox EZを買った</title>
      <link>https://takecian.github.io/posts/2016-06-07-ergodox/</link>
      <pubDate>Tue, 07 Jun 2016 23:49:30 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2016-06-07-ergodox/</guid>
      <description>Ergodox EZを買った。
 Ergodox   買ったのは無刻印の黒のキーボードなんだけど追加でキーキャップをpimpmykeyboardで注文。
 Ergodox   キーキャップのことをもう少し詳しくメモしておくと、
 アルファベット刻印有りのキーキャップは DSA 無刻印のキーキャップは DCS  で、キーキャップの形状が違う。DCS の中でも Row0, Row1, Row2.. でさらに形状が違います。
ソース：https://ergodox-ez.com/pages/our-keycaps
キーキャップの形状はここのサイトの図が分かりやすいです。
http://keycapsdirect.com/key-caps.php
そのため、Ergodox EZ の無刻印タイプを買ってキーキャップを一部交換したいと思ったらどの場所（どの形状）のキーキャップが必要か確認する必要があります。
Ergodox のどの位置のキーがどの形状(Row0 とか Row1 とか)かっていうのは↓の記事を参考に注文するとよいです。
https://input.club/forums/topic/placing-dcs-keycaps-on-my-ergodox-infinity
色はこちらが参考になります。https://deskthority.net/wiki/Signature_Plastics_PBT_colours</description>
    </item>
    
    <item>
      <title>Checklista</title>
      <link>https://takecian.github.io/dev/2016-05-12-checklista/</link>
      <pubDate>Thu, 12 May 2016 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-05-12-checklista/</guid>
      <description>Support page for Checklista!
Under review.</description>
    </item>
    
    <item>
      <title>DelayedCamera</title>
      <link>https://takecian.github.io/dev/2016-05-15-delayedcamera/</link>
      <pubDate>Sat, 22 Nov 2014 22:03:06 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-05-15-delayedcamera/</guid>
      <description>Support page for iOS app &#39;DelayedCamera&#39;.
＃Under development.</description>
    </item>
    
    <item>
      <title>Wordpress から github page へ</title>
      <link>https://takecian.github.io/posts/2014-10-04-post-261/</link>
      <pubDate>Sat, 04 Oct 2014 21:00:52 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-10-04-post-261/</guid>
      <description>勉強ネタは Qiita に投稿するようになるとこっちに投稿するネタがなくなった。。
さくらの VPS で wordpress を稼働させてたんですが毎月払うのがもったいなくなってきたので github pages に移行してきました。
ブログは Wordpress から Jekyll(じゃこる？)に。
移行ツールもあったので過去のエントリも持ってこれました(画像とかはめんどかったのでおいてきた・・)</description>
    </item>
    
    <item>
      <title>Qiita が楽しい</title>
      <link>https://takecian.github.io/posts/2014-07-10-post-260/</link>
      <pubDate>Thu, 10 Jul 2014 16:44:52 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-07-10-post-260/</guid>
      <description>勉強兼ねて さくらの VPS で wordpress をインストールしてブログを書いてたんですが 最近は Qiita に投稿することが増えてきました。
http://qiita.com/takecian
kobito っていう Markdown エディタもあるし、 いいねと思った記事は Stock されるし(Contribute という数字に現れる)、 書いていて楽しい。
ということでこっちのブログに書く頻度が減りそうw</description>
    </item>
    
    <item>
      <title>マンガ発売日カレンダーアプリ「Shelfy」をリリースしました。</title>
      <link>https://takecian.github.io/posts/2014-07-04-post-263/</link>
      <pubDate>Fri, 04 Jul 2014 07:29:24 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-07-04-post-263/</guid>
      <description>審査に無事通ったのでShelfy(シェルフィ)を昨日公開しました。
http://shelfy.me/
普段マンガをけっこう読んで(買って)いて、本屋に行く度に、
「あれ？この本買ったっけ？」
と分からなくなっていたのがきっかけです。
たまに同じ本を２冊買ってしまうこともあって、
その時の 自分アホやろ という気持ちがかなりつらくてですね。
この世からこの絶望を根絶しないといかん、と思いこのアプリを作りました。
もともとは Rails を勉強するついでに取り組んでたんですが
やっぱりネイティブアプリでしょう、ということで iPhone アプリにしました。
リリースするまでにやったこととか Qiita にまとめようと思います。
最近 Qiita に投稿するようになったけど Contirbute の数が増えるって楽しい。
http://qiita.com/takecian </description>
    </item>
    
    <item>
      <title>Carp</title>
      <link>https://takecian.github.io/dev/2016-04-18-carp/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-carp/</guid>
      <description>iPhone アプリ「カープファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Dena</title>
      <link>https://takecian.github.io/dev/2016-04-18-dena/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-dena/</guid>
      <description>iPhone アプリ「ハマファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Dragons</title>
      <link>https://takecian.github.io/dev/2016-04-18-dragons/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-dragons/</guid>
      <description>iPhone アプリ「強竜ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Fighters</title>
      <link>https://takecian.github.io/dev/2016-04-18-fighters/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-fighters/</guid>
      <description>iPhone アプリ「日ハムファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Giants</title>
      <link>https://takecian.github.io/dev/2016-04-18-giants/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-giants/</guid>
      <description>iPhone アプリ「巨人ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Hawks</title>
      <link>https://takecian.github.io/dev/2016-04-18-softbank/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-softbank/</guid>
      <description>iPhone アプリ「若鷹ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Lions</title>
      <link>https://takecian.github.io/dev/2016-04-18-lions/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-lions/</guid>
      <description>iPhone アプリ「獅子ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Marines</title>
      <link>https://takecian.github.io/dev/2016-04-18-marines/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-marines/</guid>
      <description>iPhone アプリ「鴎ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Orix</title>
      <link>https://takecian.github.io/dev/2016-04-18-orix/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-orix/</guid>
      <description>iPhone アプリ「猛牛ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Rakuten</title>
      <link>https://takecian.github.io/dev/2016-04-18-rakuten/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-rakuten/</guid>
      <description>iPhone アプリ「犬鷲ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Swallows</title>
      <link>https://takecian.github.io/dev/2016-04-18-swallows/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-swallows/</guid>
      <description>iPhone アプリ「ツバメファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>Tigers</title>
      <link>https://takecian.github.io/dev/2016-04-18-tigers/</link>
      <pubDate>Sun, 01 Jun 2014 15:07:13 +0900</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-04-18-tigers/</guid>
      <description>iPhone アプリ「猛虎ファン」のサポートページです。
現在審査中。</description>
    </item>
    
    <item>
      <title>iOS アプリ開発デビューしました</title>
      <link>https://takecian.github.io/posts/2014-05-06-post-244/</link>
      <pubDate>Tue, 06 May 2014 22:47:06 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-05-06-post-244/</guid>
      <description>4月からこそこそと勉強で作ってた iPhone アプリが審査に通ったので 無事iOSアプリ開発者としてデビューしました。
https://itunes.apple.com/us/app/teraha!-terasuhausufanapuri/id869781884
といっても機能やUIはまだまだ改善の余地があるので ちょこちょこ直していきたいと思う。
あと仕事の方の iOS アプリも力を入れねば。</description>
    </item>
    
    <item>
      <title>TeamGeek - Googleのギークたちはいかにしてチームを作るのか</title>
      <link>https://takecian.github.io/posts/2014-03-24-post-227/</link>
      <pubDate>Mon, 24 Mar 2014 11:32:57 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-03-24-post-227/</guid>
      <description>ちょっと遅くなったけどこの本を読んだ。
内容としてはチームとしてうまくやっていくために大切なことが書かれています。
 ミッションステートメントを決めよう  チームが同じ方向を向くためには必要なこと。決めたあとはインパクトマッピングなどを用いて具体的な行動に落とし込んでいくのがいいかも。   HRTが大事（&#34;ハート&#34;と読む）。これが欠けてる人がいるとチームは不幸になると思う。  謙虚 (Humility) 尊敬 (Respect) 信頼 (Trust)   サーバントリーダーであれ  マネージャーの仕事はチームが(仕事面でも生活面でも)幸せになることをサポートすること マネージャーやリーダーってのはチームメンバーと比べて偉い人って意味ではないんですよね。ただ役割が異なるだけ。同じ目標に向かって頑張る仲間なわけです。    一人でなんでもやりたいという気持ちはあるけど、できることには限界があることを知ることも大事。
誰かと一緒に何かをつくるためにはうまくやる方法を知る必要がある。結局はチームメンバを HRT できることができるかどうか、が大事なのではないかと。
これは自分の意見を出さない、という意味ではなくて議論する時に個人に言及するのでなくアイデアや方法に対して言及する、ということを自分や相手が理解していることが重要。
チームメンバとは今までもそれなりにうまくやってこれているつもりではあるけど仕事で来月から新しいチームに加わるので、そこでも楽しくやっていけるようにこの本で心に響いたことを意識していこうと思う。</description>
    </item>
    
    <item>
      <title>Developers Summit2014 1日目(2/13) 資料まとめ</title>
      <link>https://takecian.github.io/posts/2014-02-13-post-213/</link>
      <pubDate>Thu, 13 Feb 2014 15:14:04 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-02-13-post-213/</guid>
      <description>【13-A-1】クラウドがもたらす破壊と創造 http://www.slideshare.net/kentamagawa/developer-summit-2014
【13-B-1】サーバプロビジョニングのこれまでとこれから
https://speakerdeck.com/mizzy/future-of-server-provisioning-at-developers-summit-2014
【13-B-2】グリーにおけるChef導入事例 ～既存の資産を活かし新しい技術を導入する～
https://speakerdeck.com/ryotarai/guriniokeruchefdao-ru-shi-li-ji-cun-falsezi-chan-wohuo-kasixin-siiji-shu-wodao-ru-suru
【13-D-1】JavaからJavaScriptへ！HTML5適用から見えた次世代業務アプリケーション
http://www.slideshare.net/sagawafumio/web-31152089
【13-C-1】Cocos2d-x によるスマートフォンアプリ開発のこれまでとこれから
http://www.slideshare.net/syuhari/dev-sumi
【13-A-4】新卒エンジニア研修ですべきことできること @ryopeko
https://speakerdeck.com/ryopeko/devsumi2014-dena-bootcamp2014
※追記：公式が資料まとめてくれるようです。
http://codezine.jp/article/detail/7640?utm_source=dlvr.it&amp;utm_medium=facebook</description>
    </item>
    
    <item>
      <title>masuidrive＆吉田パクえ氏と考える「一生、エンジニアであり続けるために必要なこと」を聞いてきた</title>
      <link>https://takecian.github.io/posts/2014-02-12-masuidrive-pakue/</link>
      <pubDate>Wed, 12 Feb 2014 00:36:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-02-12-masuidrive-pakue/</guid>
      <description>昨日「一生、エンジニアであり続けるために必要なこと」という話を聞きにいってきたのですが、心に残ったことをいくつか。
年を重ねながらもエンジニアを続けるには、「コードが書ける」とは別の何かが必要、という話。
別の何かってのは、たぶん何でもよくて。でもそれは必要になった時にしか分からないので普段から視野を広げることを意識しよう、と。dot を繋げよう、というあの話と繋がる。
https://www.youtube.com/watch?v=XQB3H6I8t_4
自分の持つ dot を広げていれば、↓のように色々繋げられる。※偏るのはよくない、別分野の技術や他業種にも目を向けよう
https://twitter.com/DavidKirtlan/status/432539017134211072 から引用
あとは、「環境づくりが大切、チャレンジできない環境は危ない」という話も響いた。</description>
    </item>
    
    <item>
      <title>jquery で Parallax を実現するプラグイン jQuery-Parallax を使う</title>
      <link>https://takecian.github.io/posts/2014-02-09-post-199/</link>
      <pubDate>Sun, 09 Feb 2014 16:17:42 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-02-09-post-199/</guid>
      <description>去年からオサレ()なサイトやアプリで使われ始めたパララックス。トップページに入れてみました。スマホだとうまく動かないけどPCのブラウザだとそれっぽくなります。
パララックスを簡単に実現できますなものはたくさんあるらしいですが、とりあえず jqueryプラグインを選んでみました。
https://github.com/IanLunn/jQuery-Parallax
使い方は、並べたい画面を div タグで記述。
[code lang=&#34;ruby&#34;]
#first
.story
.float-right
.social.col-md-12
.twitter
%a.twitter-share-button{&amp;quot;data-lang&amp;quot; =&amp;gt; &amp;quot;ja&amp;quot;, &amp;quot;data-text&amp;quot; =&amp;gt; &amp;quot;マンガ発売日情報サイト「Shelfy」をシェアしました！&amp;quot;, &amp;quot;data-hashtags&amp;quot; =&amp;gt; &amp;quot;Shelfy&amp;quot;, :href =&amp;gt; &amp;quot;https://twitter.com/share&amp;quot;} ツイート
.facebook
.fb-like{&amp;quot;data-href&amp;quot; =&amp;gt; &amp;quot;http://shelfy.me#{request.fullpath}&amp;quot;, &amp;quot;data-layout&amp;quot; =&amp;gt; &amp;quot;button_count&amp;quot;, &amp;quot;data-send&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;, &amp;quot;data-show-faces&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;}
.float-left
%h2 説明文
#second
.story
.float-right
%h2 説明文
#third
.story
.float-right
%h2 説明文
[/code]
div タグのレイアウト（サイズ）を css に記述。
[code lang=&#34;ruby&#34;]
#first{
background:url(para1.jpg) 50% 0 no-repeat fixed;
background-size: cover;
color: white;</description>
    </item>
    
    <item>
      <title>Unicorn 上で動かす Rails で New Relic を使う</title>
      <link>https://takecian.github.io/posts/2014-01-28-post-190/</link>
      <pubDate>Tue, 28 Jan 2014 19:01:10 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-01-28-post-190/</guid>
      <description>設定が簡単すぎて愕然するというパフォーマンス解析ツール「New Relic」ですが Unicorn を使う場合はただ Gemfile に追加するだけではダメみたいです。
https://docs.newrelic.com/docs/ruby/no-data-with-unicorn
config/unicorn.rb に
[code lang=&#34;ruby&#34;]
preload_app true
[/code]
を追加する必要があります。
Heroku から AWS に移行したあとに New Relic が動かなくてぶつかった問題でした。</description>
    </item>
    
    <item>
      <title>Shelfy - 漫画発売日情報まとめのようななにか</title>
      <link>https://takecian.github.io/posts/2014-01-28-post-187/</link>
      <pubDate>Tue, 28 Jan 2014 01:17:06 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-01-28-post-187/</guid>
      <description>先週からインフルエンザA型にやられて寝込んでた。今は大分回復したけど、こんなにつらかったっけ？インフルエンザって。
作ってた WEBサービスを少し方向転換して漫画の発売日情報をまとめる WEB サービスにしてみようと思った。
http://shelfy.me/
1.Facebook/Twitter でログイン
2.好きな漫画家をフォロー
そうするとフォローしている漫画家のマンガが発売日順に表示される、というもの。
個人的にだけど「好きな漫画」と「好きな漫画家」はほぼ同義のような気がしていて、
＃例：「スラムダンク」好きな人は「リアル」好きだろう
好きな漫画家の新作が出れば知りたいと思うよなーと。
Rails + Twitter bootstrap で作って、
EC2 + RDS 上に
Capistrano でデプロイして、
Nginx + Unicorn で動かす
という感じ。
まだまだ荒削りなのと、ここまできて技術的負債が溜まってきたので
ここら辺で解決しときたい。テストもしっかり書かないと。</description>
    </item>
    
    <item>
      <title>Nginx(ELB) &#43; Unicorn で Rails で OAuth 認証をするときのコールバックURL</title>
      <link>https://takecian.github.io/posts/2013-12-30-post-175/</link>
      <pubDate>Mon, 30 Dec 2013 06:58:25 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-30-post-175/</guid>
      <description>Railsアプリ(Unicorn) の前段に Nginx を置くのが主流になりつつあるみたいですが何も指定しなかったら Unicorn で待ち受けてるホスト名で OAuth provider 側にコールバックURLを渡してしまうので Facebook など provider 側に「登録したCallback URL(domain)と違うよ」エラーが返ってきます。
＃Nginx を使っていないくても ELB を使うようになったら同じ問題にぶつかると思う。
その場合は、config/initialize の devise.rb か omniauth.rb で、
[code lang=&#34;ruby&#34;]
OmniAuth.config.full_host = &#39;http://hostname&#39;
[/code]
を指定しておきます。コールバックURLはローカル環境や staging/production 環境で異なると思うので initializer の中で書いておくのがよさそうです。</description>
    </item>
    
    <item>
      <title>Heroku から AWS に移行する(Nginx &#43; Unicorn で Rails アプリ開発)</title>
      <link>https://takecian.github.io/posts/2013-12-30-post-163/</link>
      <pubDate>Mon, 30 Dec 2013 04:39:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-30-post-163/</guid>
      <description>年末休みになって少し時間ができたので今作ってるアプリ(Snandy) の Heroku から AWS に移行作業を進めてる。
移行する理由としては Native に依存しているとその gem が Heroku 上だと使えなかったり、
＃調べた限り。recommendify という gem を使おうと思ったらエラーが出て怒られた
Heroku がいろんなところをよろしくやってくれるのでスキルアップのためにはもっと下のレイヤーも触らないといかんなと思ったから。
それで今日からAWS(EC2 + RDS)に環境作業を始めたんだけど、今時手作業で環境構築するのは時代遅れもいいところ、ということなので chef を使うことにした。
設定を Ruby でかけるのがすごくいい感じ。Rails でアプリを作ってたことでスッと頭に入ってくるようになった(気がする)。
EC2上では Nginx と unicorn を使って Rails を動かして、DB は RDS。なので chef で Nginx と MySQL、rvm をインストールする。
MySQL と rvm は opscode や github からもってきた cookbook を使用。
Berkfile はこんな感じ。
[code lang=&#34;ruby&#34;]
site : opscode
metadata
cookbook &#39;mysql&#39;
cookbook &#39;rvm&#39;, github: &#39;fnichol/chef-rvm&#39;
[/code]
Nginx の recipe は</description>
    </item>
    
    <item>
      <title>Heroku で rake assets:precompile 時に環境変数を参照できるようにする</title>
      <link>https://takecian.github.io/posts/2013-12-29-post-157/</link>
      <pubDate>Sun, 29 Dec 2013 01:25:31 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-29-post-157/</guid>
      <description>タイトルの通り。何もしないと Heroku では rake assets:precomplie 時には環境変数が参照できない。
Rails アプリのルートディレクトリ上で、
[code lang=&#34;ruby&#34;]
heroku labs:enable user-env-compile -a myapp
[/code]
参考：
https://devcenter.heroku.com/articles/labs-user-env-compile</description>
    </item>
    
    <item>
      <title>Rails で Model に 多対多の関連をもたせる</title>
      <link>https://takecian.github.io/posts/2013-12-23-post-151/</link>
      <pubDate>Mon, 23 Dec 2013 19:45:33 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-23-post-151/</guid>
      <description>WEBサービスによくある「お気に入り機能」を作ってみる。
ユーザー(お気に入りにする側)対商品(お気に入りにされる側)という
Model 同士に多対多の関連を持たせる、という話。
これも１対多の関連の時と同じように belongs_to と has_many メソッドを使う。
子から親に参照をしたい場合に belongs_to を使って、
親から子を参照したい場合に has_many を使う。
今回は関連を持たせるためのテーブルを別で用意して、
has_many の方には through をつけて、この関連テーブル(Favoriteテーブル)を指定する。
[code lang=&#34;ruby&#34;]
class Item &amp;lt; ActiveRecord::Base
has_many :favorites, dependent: :destroy
has_many :users, through: :favorites
end
class User &amp;lt; ActiveRecord::Base
has_many :favorites, dependent: :destroy
has_many :items, through: :favorites
end
class Favorite &amp;lt; ActiveRecord::Base
belongs_to :item
belongs_to :user
validates :user_id, presence: true
validates :item_id, presence: true
end
[/code]
読み出すときは、
[code lang=&#34;ruby&#34;]
- item.</description>
    </item>
    
    <item>
      <title>Reveal.js で自己紹介スライドを作る</title>
      <link>https://takecian.github.io/posts/2013-12-08-post-144/</link>
      <pubDate>Sun, 08 Dec 2013 23:12:39 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-08-post-144/</guid>
      <description>ちょっと自己紹介スライドを作る必要があって
パワポ以外で作ってみようと思って Reveal.js を使ってみた。
Reveal.js:プレゼンテーション用の JavaScript のライブラリ。アニメーションがオシャレ。
といっても Reveal.js を使えるオンラインエディタを使っただけだけど。
slid.es
これが無料で使えるとか世の中便利すぎて怖い。</description>
    </item>
    
    <item>
      <title>Rails で Model に 1 対多の関連をもたせる</title>
      <link>https://takecian.github.io/posts/2013-12-01-post-135/</link>
      <pubDate>Sun, 01 Dec 2013 22:55:58 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-01-post-135/</guid>
      <description>最近進捗がなかった Rails ネタ。というか今作ってるやつ。
ググるとよく出てくる Model に１対多の関連を持たせる、という話。
belongs_to と has_many メソッドを使う。
子から親に参照をしたい場合に belongs_to を使って、
親から子を参照したい場合に has_many を使えばよくて、必ず両方つけないといけないわけではないらしい。
今回は互いに参照したい(Company の下に Item を複数関連付ける)、このような Model クラスを定義する。
[code lang=&#34;ruby&#34;]
class Company &amp;lt; ActiveRecord::Base
has_many :items, :dependent =&amp;gt; :destroy
end
class Item &amp;lt; ActiveRecord::Base
belongs_to :company
end
[/code]
読み出すときは、
[code lang=&#34;ruby&#34;]
&amp;lt;h1&amp;gt;&amp;lt;%= link_to @company.name + &#39;のお菓子&#39;, @company.url%&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;row-fluid&amp;quot;&amp;gt;
&amp;lt;% @company.items.each do |item| %&amp;gt;
&amp;lt;div class=&amp;quot;thumbnail item&amp;quot;&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;/div&amp;gt;
[/code]
とか
[code lang=&#34;ruby&#34;]</description>
    </item>
    
    <item>
      <title>HTML5 Conference 2013 に行ってきた</title>
      <link>https://takecian.github.io/posts/2013-11-30-post-119/</link>
      <pubDate>Sat, 30 Nov 2013 22:02:37 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-11-30-post-119/</guid>
      <description>調布のNTT中央研修センタで開催された HTML5 Conference に行ってきました。
HTML5 Conference
キーノートは慶応の村井純教授、Google 及川さん・ JOWA 白石さん。
http://www.youtube.com/watch?v=9HqnXcPjCGg
村井先生は、政府を含めた国家IT戦略の話や医療の話など。
「IT戦略の中に“HTML5” や&#34;パーソナルファブリケータ(3Dプリンタを使って個人で製造すること)”などの言葉も組み入れられた」とのことで、今後さらに爆発的に普及していく可能性がある、と。
また、一度加速すると指数関数的に加速するもので、10年後にできたらいいなと思っているものが7年後にはできるようになると思う、と。
7年後(2020年東京オリンピック)になにをしたいか考えよう、と話していた。
------------------------------------------------------------------
Google 及川さんは技術の深まり、広がりについて。
Webの世界の進化がにWebの中にとどまらなくなりつつある、と。
注目の技術トレンドとしては、
・Web MIDI
・WebAudio
・Web RTC
をあげていた。
今後の展望としては、機能・使い勝手・開発生産性 を改善させる方向にさらに進んでいく、と。Web Components などは開発生産性をあげていくものになるらしい。
また、モバイルの普及にも触れていて、
・販売された端末のうち、70%がスマホ・タブレット
・全体のWEBアクセスのうち、40％がスマホ・タブレット
というデータを示し、「(これだけスマホ・タブレットが普及していながら、まだPCからのWEBアクセスが多いということは、WEBはモバイルのために)まだまだやるべきことが残っている」というようなことを言っていた。
------------------------------------------------------------------
白石さんは主にコミュニティの広がりについて触れられていた。
コミュニティ発足当時から、今回のような大きなイベントを開催するようになるまでを解説されていた。
今回のイベントは最寄りの駅からマイクロバスが手配されていたり、会場でドーナツが配られたり、複数セッションの同時進行など、2000人規模のイベントの進行などを滞りなく(少なくとも自分にはそう思えた)やっているようだった。こんなチームを作り上げるのはそう簡単ではないんだろうと素直にすごいなーと思った。
------------------------------------------------------------------
ここからは下は参加したセッションの感想とか資料のリンクとか。
------------------------------------------------------------------
「モバイルフロンティア：フロントエンドエンジニアとデザイナーのためのモバイルユーザーエクスペリエンス」
資料
同名の書籍の翻訳者のセッション。Amazonへのリンクはこれ。本のエッセンスをかいつまんで紹介してくれていた。
中でも印象に残ったのが、「コンテンツそのものがインターフェースになる」という話。これは数年前からMicrosoftが言ってる「ユーザーに価値のあるもの(コンテンツ)を全面に」というものに近い気がした。コンテンツを仕切るための線や枠などいらんのですよ、という考え方。
あと、アニメーションを考える上で基本となる12のルール、というものも紹介されていた。ディズニーで使われているアニメーション技法にそんなものがあるらしい。ググってみると以下のような情報が出てきた、たぶんこういう話。詳しくは書籍を読んだほうがいいと思う。
http://www.youtube.com/watch?v=xqGL1ZLk3n8#t=38
引用元：ディズニーのCGアニメーション制作における１２のルール
------------------------------------------------------------------
「(白石俊平と) カッコいいやつら 番外編 「スタートアップのススメ」」
登壇者：adamrocker さん、徳井直生さん、山下大介さん、白石俊平さん
http://www.youtube.com/watch?v=Oc8Wk7HYn0E&amp;feature=share&amp;t=3h23m34s
座談会形式でスタートアップの仲間集めや資金集めなど、スタートアップに興味ある人向けに話してくれる会。生々しい数字が出ていて参加してよかったと思った。中でも山下さん(だったと思う)の、
「売上がないままだと、(中の人は)あと何ヶ月で力尽きるかは分かっているわけです。それが利益が出て、『１ヶ月延びた、２ヶ月延びた』という感じ」
というようなことを言っていたのが印象に残った。大きな企業の１エンジニアの自分としては、「今うちは赤字だけど、10年先は分からんけど、3年先くらいは今の会社はまだ残ってるよな」という感じで生きていて、そこの感覚がかなり違っている気がした。どっちがいいのかは分からないけど。
------------------------------------------------------------------
勉強会に行くと刺激になると同時に、発表している人たちと自分とのレベルの違いに絶望する。この思いを忘れないうちにコードを書かねば。input ばかりで output しないままでいると自分が嫌いな人たちと同じになってしまう。明日は Rails 関連でエントリを書こう。</description>
    </item>
    
    <item>
      <title>やらないと決める</title>
      <link>https://takecian.github.io/posts/2013-11-24_dont_do/</link>
      <pubDate>Sun, 24 Nov 2013 22:49:43 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-11-24_dont_do/</guid>
      <description>時間が足りない。
・仕事はしないといけない
・マンガは読みたい
・勉強はしたい
・ゴルフはしたい
・飲みにも行きたい
・恋愛もしたい
時間は有限なので、なにかやらないものを決めないといけないんだけど、
時間の大部分を占めるのは仕事で、
これをやらない、と決めると他のものにも支障が出てくるので、
少し前に尊敬する人から、
「悩んだら誰にも見られないところで、考えていることを紙に書くといいよ」</description>
    </item>
    
    <item>
      <title>「ゼロから始めるRailsアプリ開発」に行ってきた。</title>
      <link>https://takecian.github.io/posts/2013-11-07_zero_rails/</link>
      <pubDate>Thu, 07 Nov 2013 21:14:01 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-11-07_zero_rails/</guid>
      <description>Rails の情報を収集しようと思って Rails の勉強会に行ってきました。
http://connpass.com/event/3972/</description>
    </item>
    
    <item>
      <title>Mac OS Mavericks で bcrypt-ruby がインストールできない場合の対処</title>
      <link>https://takecian.github.io/posts/2013-11-04-post-104/</link>
      <pubDate>Mon, 04 Nov 2013 18:42:22 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-11-04-post-104/</guid>
      <description>Rails を勉強中に、壁にぶつかった。
has_secure_password を使う際に必要な bcrypt-ruby がインストールできない。
ググってみたら、gcc-42 が見つからないって話はよく見つかるんだけど、
それとは違ってこんなエラーが出る。
[bash]
Building native extensions. This could take a while...
ERROR: Error installing bcrypt-ruby:
ERROR: Failed to build gem native extension.
 /Users/usrename/.rvm/rubies/ruby-2.0.0-p247/bin/ruby extconf.rb
creating Makefile
make
compiling bcrypt_ext.c
In file included from /Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby.h:33,
from bcrypt_ext.c:1:
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:51:21: error: string.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:61:21: error: stdint.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:64:23: error: inttypes.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:68:19: error: stdio.</description>
    </item>
    
    <item>
      <title>楽天テクノロジーカンファレンス2013に行ってきた</title>
      <link>https://takecian.github.io/posts/2013-10-26-post-87/</link>
      <pubDate>Sat, 26 Oct 2013 15:16:50 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-10-26-post-87/</guid>
      <description>楽天テクノロジーカンファレンス2013に行ってきました。
印象に残ったセッションを自分用メモのつもりで残しておく。
Elixir Ruby と Erlang に似た関数型言語だとか。
Speaker は Ruby on rails や Ruby 関連の著書で有名な Dave Thomas。

Aiming the Moving Target(Keynote) Speaker は Matz 。

我々は、
・自分たちが作っているものを分からない
・自分が欲しいものを分からない
それ(無知であること)を認めよう、試行錯誤しよう。
失敗してもいいから、進み続けようというようなことを言ってたんだけども、
「競争力に必要なもの以外のすべてをOSSに」
の言葉が個人的には一番刺さった。
そうですよね、あるものは使えばいいんですよ。
というかセッション終わって数時間しかないのに Youtube 上に公開されてるのはすごい。</description>
    </item>
    
    <item>
      <title>Rails で Cloudinary へアップロードした画像を変換する</title>
      <link>https://takecian.github.io/posts/2013-10-12-post-67/</link>
      <pubDate>Sat, 12 Oct 2013 23:29:11 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-10-12-post-67/</guid>
      <description>WEB サービス用のストレージと言えば S3 が頭に浮かぶけど、
Cloudinary というサービスが便利、という記事を読んだ。
＃アップロードの方法自体は CarrierWave というものを使えば簡単なので割愛。
アップロードした画像は URL を変えることでエフェクトを加えるなど加工することができるらしい。
例えばアップロードした画像に以下のようなパラメータを与えると、
&amp;lt;%= link_to cl_image_tag(item.thumbnail.img, :width =&amp;gt; 300, :height =&amp;gt; 300, :alt =&amp;gt; item.name), item %&amp;gt;
＃item.thumbnail.img はアップロードした画像の情報。CarrierWave でアップロードした時に取り込まれる。
生成されるのは↓のURL。
http://res.cloudinary.com/hcfuhpwst/image/upload/v1381573720/vp37invkz2ckhfs8t5rw.jpg
そして画像がこちら。
対して、radius のパラメータを加えた場合、
&amp;lt;%= link_to cl_image_tag(item.thumbnail.img, :width =&amp;gt; 300, :height =&amp;gt; 300, :radius =&amp;gt; 20, :alt =&amp;gt; item.name, :q =&amp;gt; 100), item %&amp;gt;
生成されるURLが↓で、
http://res.cloudinary.com/hcfuhpwst/image/upload/r_20/v1381573720/vp37invkz2ckhfs8t5rw.jpg
加工された画像がこちら。
加工を加えると画質が落ちるようなので、 :q = 100 というパラメータも渡して画質を保つようにする。</description>
    </item>
    
    <item>
      <title>Codeship を使って Bitbucket へ Push と同時にHerokuへデプロイする</title>
      <link>https://takecian.github.io/posts/2013-09-29-post-58/</link>
      <pubDate>Sun, 29 Sep 2013 21:47:08 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-29-post-58/</guid>
      <description>今 Rails を使って個人プロジェクトの開発を進めていて、
テストはRSpec、
コードの管理は bitbucket、
サーバは Heroku、
と、なんとなく固まってきたんだけど、
pushするときに bitbucket と Heroku に両方デプロイするのがめんどい。
それでなんかないかなーと探してたら、ちょうどよさそうなものを見つけた。
Codeship
https://www.codeship.io
一言で言うと たぶん jenkins みたいなもの。
このブログの画像を参考に、bitbucket(Githubとかも)のリポジトリとHerokuのアプリと関連付けを行えば、
http://blog.codeship.io/2013/09/26/how-to-deploy-a-ruby-on-rails-app-from-github-to-heroku.html
Push するのをトリガーに、
リポジトリを Clone してきて、Heroku に Push してくれる。
設定すればテストを走らせることもできらしい。
job(っていう言い方が正しいのか分からないけど)の最後の結果を↓のように画像で表示してくれて、
最後に実行した job が成功したか分かるようにもなってる。
便利すぎワロタ。</description>
    </item>
    
    <item>
      <title>Heroku 上に Rails をデプロイするときにハマったこと - SQLite編</title>
      <link>https://takecian.github.io/posts/2013-09-24-post-54/</link>
      <pubDate>Tue, 24 Sep 2013 00:57:29 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-24-post-54/</guid>
      <description>Rails ではデフォルトでは SQLite が使用されますが、
Heroku では SQLite がサポートされていないので
他のデータベースを使用する必要があります。
https://devcenter.heroku.com/articles/sqlite3
ここで代用が簡単なのが、 PostgreSQLらしい。
Gemfile で Production 環境用に gem &#39;pg&#39; を追加。
Rails が入っているディレクトリ上で、
heroku addons:add heroku-postgresql
を実行して、PostgreSQLのアドオンを追加。
ただ、それだけだとデプロイ時に、
Invalid DATABASE_URL
って怒られる。
DATABASE_URL という環境変数に
PostgreSQLのURLを指定してやる必要があるらしい。
heroku config
を実行すると出てくる DBのURLを
heroku config:add DATABASE_URL=DBのURL
としてあげればOK。</description>
    </item>
    
    <item>
      <title>今から始めるWEBサービス開発</title>
      <link>https://takecian.github.io/posts/2013-09-23-post-45/</link>
      <pubDate>Mon, 23 Sep 2013 21:28:48 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-23-post-45/</guid>
      <description>思いついたアイデアを形にする手段を検討中。
これからはNode.jsの時代だと思ったんだけど、
ExpressJS や Sailsをベースに開発を進めるには
情報がまだ完全に出揃っていなくて茨の道になりそう。
実装パターンをググってみても
まだ王道のやり方というものが出てきていないように思える。
壁にぶち当たった時に情報を得られるのはRubyのフレームワークの方で、
SinatraかPadrino、またはRailsのどれかがよさそう。
今回はテーマを決めてがっつり作ってみようと思うので
かなりの周回遅れな気もするけど Rails で始めてみようと思う。
先人達が道を開いてくれているはずなのでやりたいことに集中できるはず。
[code lang=&#34;sh&#34;]
rails new Snandy
[/code]
から始めて Heroku にデプロイしていく。
先走ってドメインだけ取ってしまった。
Snandy.me
Snack + Candy の造語で、お菓子の情報まとめサイトでも作ってみる。
最近よく .me ドメインのサイトを見かける。
me 自体はモンテネグロのドメインらしいけど、「私」を意味するドメインで
けっこう人気があるらしい。
そういう流れに乗って自分も me ドメインをとってみた。</description>
    </item>
    
    <item>
      <title>アニメーションライブラリ isotope.js</title>
      <link>https://takecian.github.io/posts/2013-09-18-post-31/</link>
      <pubDate>Wed, 18 Sep 2013 01:53:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-18-post-31/</guid>
      <description>最近テラスハウスにはまっていて、特にBGMが素敵。
そこでテラスハウスの BGM を簡単に聴けるようなプレーヤーを
作っているんだけど、ビデオの一覧をどうやって表示するか悩み中。
職場でそんな話をしたら「isotopeってのを使ってる人がいたよ」という話を聞いた。
isotope。
div タグの下に element というclass属性の要素を作って、
＃コード中では AngularJSを使用。
[code lang=&#34;html&#34;]
&amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;isotope&amp;quot;&amp;gt;
&amp;lt;div ng-repeat=&amp;quot;video in videos&amp;quot; class=&amp;quot;element isotope-item {{video.date}}&amp;quot; date=&amp;quot;{{video.date}}&amp;quot; count=&amp;quot;{{video.count}}&amp;quot; ng-click=&amp;quot;select($event)&amp;quot; &amp;gt;
&amp;lt;p&amp;gt;放送日時: {{video.date}}&amp;lt;/p&amp;gt;
&amp;lt;img src=&amp;quot;{{video.thumbnail}}&amp;quot; vid=&amp;quot;{{video.vid}}&amp;quot; class=&amp;quot;videoimg&amp;quot; index=&amp;quot;{{video.index}}&amp;quot; /&amp;gt;
&amp;lt;p&amp;gt;{{video.artist}} 再生回数: {{video.count}}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;「{{video.title}}」&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
[/code]
js で element class属性に対して isotope メソッドを実行。
getSortData にはソートしたいフィールドを返すようにしておく。
[code lang=&#34;js&#34;]
var $container = $(&#39;#container&#39;);
$container.isotope({
itemSelector: &#39;.element&#39;,
getSortData: {
date: function($elem) {
var date = $elem.attr(&#39;date&#39;);</description>
    </item>
    
    <item>
      <title>はてなブログから引っ越し</title>
      <link>https://takecian.github.io/posts/2013-09-15-post-19/</link>
      <pubDate>Sun, 15 Sep 2013 22:07:47 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-15-post-19/</guid>
      <description>エンジニアたるもの自分ドメインのサイトの１つや２つ持っておけ、
という話をどこかで聞いたので、さくらVPSでWordpressを立ち上げてみました。
はてなブログからこっちに引っ越します。
http://t-fjk.hatenablog.com/
サーバの設定は、Berkshelf + Chef で行いました。
準備さえしてしまえばコマンド一発で PHP やら MySQLやら
自動でインストールされる、確かに鼻血でそうなくらいすごい。</description>
    </item>
    
    <item>
      <title>Cospa</title>
      <link>https://takecian.github.io/dev/2017-01-30-cospa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/dev/2017-01-30-cospa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Google について</title>
      <link>https://takecian.github.io/note/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/note/google/</guid>
      <description>Google How Google Works 文化   従来型のガチガチな計画は意味がない（予定より早めにリリースすることなんてある？）
 現場のエンジニアに裁量を与えよう    カバの言う事は聞くな（カバ＝一番偉い人）
 意思決定の質と蓬春の水準は無関係 意義を唱える義務・・ある考え方に問題があると思ったら懸念を表明する義務    7 のルール
 マネージャーは最低７人の直属の部下を持つ事  フラットな組織になりやすい マイクロマネジメントになりにくい（物理的に見る時間が足りなくなる）      独立採算制にしない
 自分たちの事業のことを優先して考えるようになるから    一番影響力の大きな人を中心に会社を作る
 マネージャーは肩書きが作る、リーダーは周りの人間が作る    死ぬほど働いているのに楽しくないと言う場合、何か間違っている
  戦略 人材 意思決定 コミュニケーション イノベーション WORK Rules!  Team Geek 天才プログラマの神話 素晴らしいチーム文化 船にはキャプテンが必要 有害な人に対処する 組織的操作の技法 ユーザーも人間 </description>
    </item>
    
    <item>
      <title>Meeting template</title>
      <link>https://takecian.github.io/note/meeting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/note/meeting/</guid>
      <description>Meeting template  Goal of this meeting(事前に準備)  ミーティングの目的を事前に共有する   Agenda(事前に準備)  目的を達成するために話し合う議題   When we can finish meeting(事前に準備)  何ができればミーティングを終了できるかを明らかにする   Action Item  ミーティングで明らかになった Action Item を書き出す    </description>
    </item>
    
    <item>
      <title>NgsFan</title>
      <link>https://takecian.github.io/dev/2017-02-15-ngs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/dev/2017-02-15-ngs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scrum の時間配分</title>
      <link>https://takecian.github.io/note/scrum_calendar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/note/scrum_calendar/</guid>
      <description>1week sprint の例 Sprint planning 1(What) - 1 Hour この Sprint で何を成し遂げたいかを計画する。
Sprint planning 2(How) - 1 Hour  この Sprint で成し遂げたいことをどうやって成し遂げるか計画する。
Sprint review - 1 Hour Sprint で実現したものを確認して、プロダクトの方向性について議論する。
できたものの善し悪しを話す場ではないので注意。
Sprint retrospective - 1 Hour Sprint で起きた出来事を振り返って次Sprintをより良いものにするには何をすれば良いか決める。
Backlog refinement - 1 Hour Backlog の優先度の見直し、大きい User Story の分割を行う。 かける時間は sprint の期間の5%以内に収めるのが目安。
Daily scrum - 15min 前回の Daily scrum の時点から、
 やったこと やること 困っていること を共有する。長くても15分以内で終わらせる。  </description>
    </item>
    
    <item>
      <title>Smart QR Code reader</title>
      <link>https://takecian.github.io/dev/2016-06-24-title-qr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/dev/2016-06-24-title-qr/</guid>
      <description> test  </description>
    </item>
    
    <item>
      <title>プロダクト開発で気をつける事</title>
      <link>https://takecian.github.io/note/ideanote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://takecian.github.io/note/ideanote/</guid>
      <description>作り始める前に確認する  製品によってどんな問題を解決するのか 誰のためのどんな問題を解決するのか 市場の大きさは？ 製品化を成功を評価する方法はあるか 競合はあるか 勝てる要素はあるか なぜ今やるのか どうやって製品を市場に出すか 成功のために必要な要素は 以上を前提を踏まえた上でやるべきかどうか  作り始めてから気をつけること  この製品はターゲット顧客の心に届いているか 全力を尽くして使いやすいものにしただろうか リリースする時点の競争で競合に勝てるか どう差別化できているか説明できるか 実際に動いているか 製品に欠けているものはないだろうか 製品の強みが顧客の大切なことと一致しているか お金を払う価値が有るか チームメンバーも製品の強みを理解しているか  </description>
    </item>
    
  </channel>
</rss>