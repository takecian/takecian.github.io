<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on takecian</title>
    <link>https://takecian.github.io/categories/web/</link>
    <description>Recent content in web on takecian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 09 Feb 2014 16:17:42 +0900</lastBuildDate><atom:link href="https://takecian.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jquery で Parallax を実現するプラグイン jQuery-Parallax を使う</title>
      <link>https://takecian.github.io/posts/2014-02-09-post-199/</link>
      <pubDate>Sun, 09 Feb 2014 16:17:42 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-02-09-post-199/</guid>
      <description>去年からオサレ()なサイトやアプリで使われ始めたパララックス。トップページに入れてみました。スマホだとうまく動かないけどPCのブラウザだとそれっぽくなります。
パララックスを簡単に実現できますなものはたくさんあるらしいですが、とりあえず jqueryプラグインを選んでみました。
https://github.com/IanLunn/jQuery-Parallax
使い方は、並べたい画面を div タグで記述。
[code lang=&#34;ruby&#34;]
#first
.story
.float-right
.social.col-md-12
.twitter
%a.twitter-share-button{&amp;quot;data-lang&amp;quot; =&amp;gt; &amp;quot;ja&amp;quot;, &amp;quot;data-text&amp;quot; =&amp;gt; &amp;quot;マンガ発売日情報サイト「Shelfy」をシェアしました！&amp;quot;, &amp;quot;data-hashtags&amp;quot; =&amp;gt; &amp;quot;Shelfy&amp;quot;, :href =&amp;gt; &amp;quot;https://twitter.com/share&amp;quot;} ツイート
.facebook
.fb-like{&amp;quot;data-href&amp;quot; =&amp;gt; &amp;quot;http://shelfy.me#{request.fullpath}&amp;quot;, &amp;quot;data-layout&amp;quot; =&amp;gt; &amp;quot;button_count&amp;quot;, &amp;quot;data-send&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;, &amp;quot;data-show-faces&amp;quot; =&amp;gt; &amp;quot;false&amp;quot;}
.float-left
%h2 説明文
#second
.story
.float-right
%h2 説明文
#third
.story
.float-right
%h2 説明文
[/code]
div タグのレイアウト（サイズ）を css に記述。
[code lang=&#34;ruby&#34;]
#first{
background:url(para1.jpg) 50% 0 no-repeat fixed;
background-size: cover;
color: white;</description>
    </item>
    
    <item>
      <title>Unicorn 上で動かす Rails で New Relic を使う</title>
      <link>https://takecian.github.io/posts/2014-01-28-post-190/</link>
      <pubDate>Tue, 28 Jan 2014 19:01:10 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-01-28-post-190/</guid>
      <description>設定が簡単すぎて愕然するというパフォーマンス解析ツール「New Relic」ですが Unicorn を使う場合はただ Gemfile に追加するだけではダメみたいです。
https://docs.newrelic.com/docs/ruby/no-data-with-unicorn
config/unicorn.rb に
[code lang=&#34;ruby&#34;]
preload_app true
[/code]
を追加する必要があります。
Heroku から AWS に移行したあとに New Relic が動かなくてぶつかった問題でした。</description>
    </item>
    
    <item>
      <title>Shelfy - 漫画発売日情報まとめのようななにか</title>
      <link>https://takecian.github.io/posts/2014-01-28-post-187/</link>
      <pubDate>Tue, 28 Jan 2014 01:17:06 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2014-01-28-post-187/</guid>
      <description>先週からインフルエンザA型にやられて寝込んでた。今は大分回復したけど、こんなにつらかったっけ？インフルエンザって。
作ってた WEBサービスを少し方向転換して漫画の発売日情報をまとめる WEB サービスにしてみようと思った。
http://shelfy.me/
1.Facebook/Twitter でログイン
2.好きな漫画家をフォロー
そうするとフォローしている漫画家のマンガが発売日順に表示される、というもの。
個人的にだけど「好きな漫画」と「好きな漫画家」はほぼ同義のような気がしていて、
＃例：「スラムダンク」好きな人は「リアル」好きだろう
好きな漫画家の新作が出れば知りたいと思うよなーと。
Rails + Twitter bootstrap で作って、
EC2 + RDS 上に
Capistrano でデプロイして、
Nginx + Unicorn で動かす
という感じ。
まだまだ荒削りなのと、ここまできて技術的負債が溜まってきたので
ここら辺で解決しときたい。テストもしっかり書かないと。</description>
    </item>
    
    <item>
      <title>Nginx(ELB) &#43; Unicorn で Rails で OAuth 認証をするときのコールバックURL</title>
      <link>https://takecian.github.io/posts/2013-12-30-post-175/</link>
      <pubDate>Mon, 30 Dec 2013 06:58:25 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-30-post-175/</guid>
      <description>Railsアプリ(Unicorn) の前段に Nginx を置くのが主流になりつつあるみたいですが何も指定しなかったら Unicorn で待ち受けてるホスト名で OAuth provider 側にコールバックURLを渡してしまうので Facebook など provider 側に「登録したCallback URL(domain)と違うよ」エラーが返ってきます。
＃Nginx を使っていないくても ELB を使うようになったら同じ問題にぶつかると思う。
その場合は、config/initialize の devise.rb か omniauth.rb で、
[code lang=&#34;ruby&#34;]
OmniAuth.config.full_host = &#39;http://hostname&#39;
[/code]
を指定しておきます。コールバックURLはローカル環境や staging/production 環境で異なると思うので initializer の中で書いておくのがよさそうです。</description>
    </item>
    
    <item>
      <title>Heroku から AWS に移行する(Nginx &#43; Unicorn で Rails アプリ開発)</title>
      <link>https://takecian.github.io/posts/2013-12-30-post-163/</link>
      <pubDate>Mon, 30 Dec 2013 04:39:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-30-post-163/</guid>
      <description>年末休みになって少し時間ができたので今作ってるアプリ(Snandy) の Heroku から AWS に移行作業を進めてる。
移行する理由としては Native に依存しているとその gem が Heroku 上だと使えなかったり、
＃調べた限り。recommendify という gem を使おうと思ったらエラーが出て怒られた
Heroku がいろんなところをよろしくやってくれるのでスキルアップのためにはもっと下のレイヤーも触らないといかんなと思ったから。
それで今日からAWS(EC2 + RDS)に環境作業を始めたんだけど、今時手作業で環境構築するのは時代遅れもいいところ、ということなので chef を使うことにした。
設定を Ruby でかけるのがすごくいい感じ。Rails でアプリを作ってたことでスッと頭に入ってくるようになった(気がする)。
EC2上では Nginx と unicorn を使って Rails を動かして、DB は RDS。なので chef で Nginx と MySQL、rvm をインストールする。
MySQL と rvm は opscode や github からもってきた cookbook を使用。
Berkfile はこんな感じ。
[code lang=&#34;ruby&#34;]
site : opscode
metadata
cookbook &#39;mysql&#39;
cookbook &#39;rvm&#39;, github: &#39;fnichol/chef-rvm&#39;
[/code]
Nginx の recipe は</description>
    </item>
    
    <item>
      <title>Heroku で rake assets:precompile 時に環境変数を参照できるようにする</title>
      <link>https://takecian.github.io/posts/2013-12-29-post-157/</link>
      <pubDate>Sun, 29 Dec 2013 01:25:31 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-29-post-157/</guid>
      <description>タイトルの通り。何もしないと Heroku では rake assets:precomplie 時には環境変数が参照できない。
Rails アプリのルートディレクトリ上で、
[code lang=&#34;ruby&#34;]
heroku labs:enable user-env-compile -a myapp
[/code]
参考：
https://devcenter.heroku.com/articles/labs-user-env-compile</description>
    </item>
    
    <item>
      <title>Rails で Model に 多対多の関連をもたせる</title>
      <link>https://takecian.github.io/posts/2013-12-23-post-151/</link>
      <pubDate>Mon, 23 Dec 2013 19:45:33 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-23-post-151/</guid>
      <description>WEBサービスによくある「お気に入り機能」を作ってみる。
ユーザー(お気に入りにする側)対商品(お気に入りにされる側)という
Model 同士に多対多の関連を持たせる、という話。
これも１対多の関連の時と同じように belongs_to と has_many メソッドを使う。
子から親に参照をしたい場合に belongs_to を使って、
親から子を参照したい場合に has_many を使う。
今回は関連を持たせるためのテーブルを別で用意して、
has_many の方には through をつけて、この関連テーブル(Favoriteテーブル)を指定する。
[code lang=&#34;ruby&#34;]
class Item &amp;lt; ActiveRecord::Base
has_many :favorites, dependent: :destroy
has_many :users, through: :favorites
end
class User &amp;lt; ActiveRecord::Base
has_many :favorites, dependent: :destroy
has_many :items, through: :favorites
end
class Favorite &amp;lt; ActiveRecord::Base
belongs_to :item
belongs_to :user
validates :user_id, presence: true
validates :item_id, presence: true
end
[/code]
読み出すときは、
[code lang=&#34;ruby&#34;]
- item.</description>
    </item>
    
    <item>
      <title>Rails で Model に 1 対多の関連をもたせる</title>
      <link>https://takecian.github.io/posts/2013-12-01-post-135/</link>
      <pubDate>Sun, 01 Dec 2013 22:55:58 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-12-01-post-135/</guid>
      <description>最近進捗がなかった Rails ネタ。というか今作ってるやつ。
ググるとよく出てくる Model に１対多の関連を持たせる、という話。
belongs_to と has_many メソッドを使う。
子から親に参照をしたい場合に belongs_to を使って、
親から子を参照したい場合に has_many を使えばよくて、必ず両方つけないといけないわけではないらしい。
今回は互いに参照したい(Company の下に Item を複数関連付ける)、このような Model クラスを定義する。
[code lang=&#34;ruby&#34;]
class Company &amp;lt; ActiveRecord::Base
has_many :items, :dependent =&amp;gt; :destroy
end
class Item &amp;lt; ActiveRecord::Base
belongs_to :company
end
[/code]
読み出すときは、
[code lang=&#34;ruby&#34;]
&amp;lt;h1&amp;gt;&amp;lt;%= link_to @company.name + &#39;のお菓子&#39;, @company.url%&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;row-fluid&amp;quot;&amp;gt;
&amp;lt;% @company.items.each do |item| %&amp;gt;
&amp;lt;div class=&amp;quot;thumbnail item&amp;quot;&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;/div&amp;gt;
[/code]
とか
[code lang=&#34;ruby&#34;]</description>
    </item>
    
    <item>
      <title>Mac OS Mavericks で bcrypt-ruby がインストールできない場合の対処</title>
      <link>https://takecian.github.io/posts/2013-11-04-post-104/</link>
      <pubDate>Mon, 04 Nov 2013 18:42:22 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-11-04-post-104/</guid>
      <description>Rails を勉強中に、壁にぶつかった。
has_secure_password を使う際に必要な bcrypt-ruby がインストールできない。
ググってみたら、gcc-42 が見つからないって話はよく見つかるんだけど、
それとは違ってこんなエラーが出る。
[bash]
Building native extensions. This could take a while...
ERROR: Error installing bcrypt-ruby:
ERROR: Failed to build gem native extension.
 /Users/usrename/.rvm/rubies/ruby-2.0.0-p247/bin/ruby extconf.rb
creating Makefile
make
compiling bcrypt_ext.c
In file included from /Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby.h:33,
from bcrypt_ext.c:1:
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:51:21: error: string.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:61:21: error: stdint.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:64:23: error: inttypes.h: No such file or directory
/Users/usrename/.rvm/rubies/ruby-2.0.0-p247/include/ruby-2.0.0/ruby/ruby.h:68:19: error: stdio.</description>
    </item>
    
    <item>
      <title>Rails で Cloudinary へアップロードした画像を変換する</title>
      <link>https://takecian.github.io/posts/2013-10-12-post-67/</link>
      <pubDate>Sat, 12 Oct 2013 23:29:11 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-10-12-post-67/</guid>
      <description>WEB サービス用のストレージと言えば S3 が頭に浮かぶけど、
Cloudinary というサービスが便利、という記事を読んだ。
＃アップロードの方法自体は CarrierWave というものを使えば簡単なので割愛。
アップロードした画像は URL を変えることでエフェクトを加えるなど加工することができるらしい。
例えばアップロードした画像に以下のようなパラメータを与えると、
&amp;lt;%= link_to cl_image_tag(item.thumbnail.img, :width =&amp;gt; 300, :height =&amp;gt; 300, :alt =&amp;gt; item.name), item %&amp;gt;
＃item.thumbnail.img はアップロードした画像の情報。CarrierWave でアップロードした時に取り込まれる。
生成されるのは↓のURL。
http://res.cloudinary.com/hcfuhpwst/image/upload/v1381573720/vp37invkz2ckhfs8t5rw.jpg
そして画像がこちら。
対して、radius のパラメータを加えた場合、
&amp;lt;%= link_to cl_image_tag(item.thumbnail.img, :width =&amp;gt; 300, :height =&amp;gt; 300, :radius =&amp;gt; 20, :alt =&amp;gt; item.name, :q =&amp;gt; 100), item %&amp;gt;
生成されるURLが↓で、
http://res.cloudinary.com/hcfuhpwst/image/upload/r_20/v1381573720/vp37invkz2ckhfs8t5rw.jpg
加工された画像がこちら。
加工を加えると画質が落ちるようなので、 :q = 100 というパラメータも渡して画質を保つようにする。</description>
    </item>
    
    <item>
      <title>Codeship を使って Bitbucket へ Push と同時にHerokuへデプロイする</title>
      <link>https://takecian.github.io/posts/2013-09-29-post-58/</link>
      <pubDate>Sun, 29 Sep 2013 21:47:08 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-29-post-58/</guid>
      <description>今 Rails を使って個人プロジェクトの開発を進めていて、
テストはRSpec、
コードの管理は bitbucket、
サーバは Heroku、
と、なんとなく固まってきたんだけど、
pushするときに bitbucket と Heroku に両方デプロイするのがめんどい。
それでなんかないかなーと探してたら、ちょうどよさそうなものを見つけた。
Codeship
https://www.codeship.io
一言で言うと たぶん jenkins みたいなもの。
このブログの画像を参考に、bitbucket(Githubとかも)のリポジトリとHerokuのアプリと関連付けを行えば、
http://blog.codeship.io/2013/09/26/how-to-deploy-a-ruby-on-rails-app-from-github-to-heroku.html
Push するのをトリガーに、
リポジトリを Clone してきて、Heroku に Push してくれる。
設定すればテストを走らせることもできらしい。
job(っていう言い方が正しいのか分からないけど)の最後の結果を↓のように画像で表示してくれて、
最後に実行した job が成功したか分かるようにもなってる。
便利すぎワロタ。</description>
    </item>
    
    <item>
      <title>Heroku 上に Rails をデプロイするときにハマったこと - SQLite編</title>
      <link>https://takecian.github.io/posts/2013-09-24-post-54/</link>
      <pubDate>Tue, 24 Sep 2013 00:57:29 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-24-post-54/</guid>
      <description>Rails ではデフォルトでは SQLite が使用されますが、
Heroku では SQLite がサポートされていないので
他のデータベースを使用する必要があります。
https://devcenter.heroku.com/articles/sqlite3
ここで代用が簡単なのが、 PostgreSQLらしい。
Gemfile で Production 環境用に gem &#39;pg&#39; を追加。
Rails が入っているディレクトリ上で、
heroku addons:add heroku-postgresql
を実行して、PostgreSQLのアドオンを追加。
ただ、それだけだとデプロイ時に、
Invalid DATABASE_URL
って怒られる。
DATABASE_URL という環境変数に
PostgreSQLのURLを指定してやる必要があるらしい。
heroku config
を実行すると出てくる DBのURLを
heroku config:add DATABASE_URL=DBのURL
としてあげればOK。</description>
    </item>
    
    <item>
      <title>今から始めるWEBサービス開発</title>
      <link>https://takecian.github.io/posts/2013-09-23-post-45/</link>
      <pubDate>Mon, 23 Sep 2013 21:28:48 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-23-post-45/</guid>
      <description>思いついたアイデアを形にする手段を検討中。
これからはNode.jsの時代だと思ったんだけど、
ExpressJS や Sailsをベースに開発を進めるには
情報がまだ完全に出揃っていなくて茨の道になりそう。
実装パターンをググってみても
まだ王道のやり方というものが出てきていないように思える。
壁にぶち当たった時に情報を得られるのはRubyのフレームワークの方で、
SinatraかPadrino、またはRailsのどれかがよさそう。
今回はテーマを決めてがっつり作ってみようと思うので
かなりの周回遅れな気もするけど Rails で始めてみようと思う。
先人達が道を開いてくれているはずなのでやりたいことに集中できるはず。
[code lang=&#34;sh&#34;]
rails new Snandy
[/code]
から始めて Heroku にデプロイしていく。
先走ってドメインだけ取ってしまった。
Snandy.me
Snack + Candy の造語で、お菓子の情報まとめサイトでも作ってみる。
最近よく .me ドメインのサイトを見かける。
me 自体はモンテネグロのドメインらしいけど、「私」を意味するドメインで
けっこう人気があるらしい。
そういう流れに乗って自分も me ドメインをとってみた。</description>
    </item>
    
    <item>
      <title>アニメーションライブラリ isotope.js</title>
      <link>https://takecian.github.io/posts/2013-09-18-post-31/</link>
      <pubDate>Wed, 18 Sep 2013 01:53:49 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-18-post-31/</guid>
      <description>最近テラスハウスにはまっていて、特にBGMが素敵。
そこでテラスハウスの BGM を簡単に聴けるようなプレーヤーを
作っているんだけど、ビデオの一覧をどうやって表示するか悩み中。
職場でそんな話をしたら「isotopeってのを使ってる人がいたよ」という話を聞いた。
isotope。
div タグの下に element というclass属性の要素を作って、
＃コード中では AngularJSを使用。
[code lang=&#34;html&#34;]
&amp;lt;div id=&amp;quot;container&amp;quot; class=&amp;quot;isotope&amp;quot;&amp;gt;
&amp;lt;div ng-repeat=&amp;quot;video in videos&amp;quot; class=&amp;quot;element isotope-item {{video.date}}&amp;quot; date=&amp;quot;{{video.date}}&amp;quot; count=&amp;quot;{{video.count}}&amp;quot; ng-click=&amp;quot;select($event)&amp;quot; &amp;gt;
&amp;lt;p&amp;gt;放送日時: {{video.date}}&amp;lt;/p&amp;gt;
&amp;lt;img src=&amp;quot;{{video.thumbnail}}&amp;quot; vid=&amp;quot;{{video.vid}}&amp;quot; class=&amp;quot;videoimg&amp;quot; index=&amp;quot;{{video.index}}&amp;quot; /&amp;gt;
&amp;lt;p&amp;gt;{{video.artist}} 再生回数: {{video.count}}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;「{{video.title}}」&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
[/code]
js で element class属性に対して isotope メソッドを実行。
getSortData にはソートしたいフィールドを返すようにしておく。
[code lang=&#34;js&#34;]
var $container = $(&#39;#container&#39;);
$container.isotope({
itemSelector: &#39;.element&#39;,
getSortData: {
date: function($elem) {
var date = $elem.attr(&#39;date&#39;);</description>
    </item>
    
    <item>
      <title>はてなブログから引っ越し</title>
      <link>https://takecian.github.io/posts/2013-09-15-post-19/</link>
      <pubDate>Sun, 15 Sep 2013 22:07:47 +0900</pubDate>
      
      <guid>https://takecian.github.io/posts/2013-09-15-post-19/</guid>
      <description>エンジニアたるもの自分ドメインのサイトの１つや２つ持っておけ、
という話をどこかで聞いたので、さくらVPSでWordpressを立ち上げてみました。
はてなブログからこっちに引っ越します。
http://t-fjk.hatenablog.com/
サーバの設定は、Berkshelf + Chef で行いました。
準備さえしてしまえばコマンド一発で PHP やら MySQLやら
自動でインストールされる、確かに鼻血でそうなくらいすごい。</description>
    </item>
    
  </channel>
</rss>
